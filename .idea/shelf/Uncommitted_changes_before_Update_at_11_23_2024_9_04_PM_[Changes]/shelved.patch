Index: app/src/main/java/com/example/appmovil/MainActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.appmovil;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.View;\r\nimport android.view.Menu;\r\nimport android.widget.TextView;\r\n\r\nimport com.example.appmovil.ui.bluetooth.Bluetooth;\r\nimport com.google.android.material.snackbar.Snackbar;\r\nimport com.google.android.material.navigation.NavigationView;\r\n\r\nimport androidx.navigation.NavController;\r\nimport androidx.navigation.Navigation;\r\nimport androidx.navigation.ui.AppBarConfiguration;\r\nimport androidx.navigation.ui.NavigationUI;\r\nimport androidx.drawerlayout.widget.DrawerLayout;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\n\r\nimport com.example.appmovil.databinding.ActivityMainBinding;\r\n\r\npublic class MainActivity extends AppCompatActivity {\r\n\r\n    private Bluetooth bluetooth;\r\n    private AppBarConfiguration mAppBarConfiguration;\r\n    private ActivityMainBinding binding;\r\n\r\n    @Override\r\n    protected void onCreate(Bundle savedInstanceState) {\r\n        super.onCreate(savedInstanceState);\r\n\r\n        binding = ActivityMainBinding.inflate(getLayoutInflater());\r\n        setContentView(binding.getRoot());\r\n\r\n        setSupportActionBar(binding.appBarMain.toolbar);\r\n        binding.appBarMain.fab.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View view) {\r\n                Snackbar.make(view, \"Replace with your own action\", Snackbar.LENGTH_LONG)\r\n                        .setAction(\"Action\", null)\r\n                        .setAnchorView(R.id.fab).show();\r\n            }\r\n        });\r\n        DrawerLayout drawer = binding.drawerLayout;\r\n        NavigationView navigationView = binding.navView;\r\n        // Passing each menu ID as a set of Ids because each\r\n        // menu should be considered as top level destinations.\r\n        mAppBarConfiguration = new AppBarConfiguration.Builder(\r\n                R.id.nav_home, R.id.nav_gallery, R.id.nav_slideshow)\r\n                .setOpenableLayout(drawer)\r\n                .build();\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);\r\n        NavigationUI.setupActionBarWithNavController(this, navController, mAppBarConfiguration);\r\n        NavigationUI.setupWithNavController(navigationView, navController);\r\n    }\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        // Inflate the menu; this adds items to the action bar if it is present.\r\n        getMenuInflater().inflate(R.menu.main, menu);\r\n        return true;\r\n    }\r\n\r\n    @Override\r\n    public boolean onSupportNavigateUp() {\r\n        NavController navController = Navigation.findNavController(this, R.id.nav_host_fragment_content_main);\r\n        return NavigationUI.navigateUp(navController, mAppBarConfiguration)\r\n                || super.onSupportNavigateUp();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/appmovil/MainActivity.java b/app/src/main/java/com/example/appmovil/MainActivity.java
--- a/app/src/main/java/com/example/appmovil/MainActivity.java	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
+++ b/app/src/main/java/com/example/appmovil/MainActivity.java	(date 1732221623395)
@@ -3,9 +3,7 @@
 import android.os.Bundle;
 import android.view.View;
 import android.view.Menu;
-import android.widget.TextView;
 
-import com.example.appmovil.ui.bluetooth.Bluetooth;
 import com.google.android.material.snackbar.Snackbar;
 import com.google.android.material.navigation.NavigationView;
 
@@ -20,7 +18,6 @@
 
 public class MainActivity extends AppCompatActivity {
 
-    private Bluetooth bluetooth;
     private AppBarConfiguration mAppBarConfiguration;
     private ActivityMainBinding binding;
 
Index: app/src/main/java/com/example/appmovil/ui/parking/ParkingFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.appmovil.ui.parking;\r\n\r\nimport android.os.Bundle;\r\nimport android.view.LayoutInflater;\r\nimport android.view.View;\r\nimport android.view.ViewGroup;\r\nimport android.widget.ImageView;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.fragment.app.Fragment;\r\n\r\nimport com.example.appmovil.databinding.FragmentParkingBinding;\r\nimport com.example.appmovil.ui.wifi.WifiHandler;\r\n\r\npublic class ParkingFragment extends Fragment {\r\n\r\n    private FragmentParkingBinding binding;\r\n    private ParkingMap parkingMap;\r\n    private WifiHandler wifiHandler;\r\n\r\n    @Override\r\n    public View onCreateView(@NonNull LayoutInflater inflater,\r\n                             ViewGroup container, Bundle savedInstanceState) {\r\n        binding = FragmentParkingBinding.inflate(inflater, container, false);\r\n        View root = binding.getRoot();\r\n\r\n        // Inicializa el mapa de parqueaderos\r\n        ImageView[] parkingSpots = {\r\n                binding.spot1, binding.spot2, binding.spot3, binding.spot4, binding.spot5,\r\n                binding.spot6, binding.spot7, binding.spot8\r\n        };\r\n        parkingMap = new ParkingMap(parkingSpots);\r\n\r\n        // Configura el Wi-Fi para recibir datos\r\n        wifiHandler = new WifiHandler(\"192.168.0.10\"); // Cambia esta IP\r\n        wifiHandler.fetchData(data -> {\r\n            // Actualiza el mapa de parqueaderos en el hilo principal\r\n            requireActivity().runOnUiThread(() -> parkingMap.updateMap(data));\r\n        });\r\n\r\n        return root;\r\n    }\r\n\r\n    @Override\r\n    public void onDestroyView() {\r\n        super.onDestroyView();\r\n        binding = null;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/appmovil/ui/parking/ParkingFragment.java b/app/src/main/java/com/example/appmovil/ui/parking/ParkingFragment.java
--- a/app/src/main/java/com/example/appmovil/ui/parking/ParkingFragment.java	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
+++ b/app/src/main/java/com/example/appmovil/ui/parking/ParkingFragment.java	(date 1732222016294)
@@ -5,6 +5,7 @@
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.ImageView;
+import android.widget.Toast;
 
 import androidx.annotation.NonNull;
 import androidx.fragment.app.Fragment;
@@ -33,14 +34,26 @@
 
         // Configura el Wi-Fi para recibir datos
         wifiHandler = new WifiHandler("192.168.0.10"); // Cambia esta IP
-        wifiHandler.fetchData(data -> {
-            // Actualiza el mapa de parqueaderos en el hilo principal
-            requireActivity().runOnUiThread(() -> parkingMap.updateMap(data));
+        wifiHandler.fetchData(new WifiHandler.OnDataReceivedListener() {
+            @Override
+            public void onDataReceived(String data) {
+                // Actualiza el mapa de parqueaderos en el hilo principal
+                requireActivity().runOnUiThread(() -> parkingMap.updateMap(data));
+            }
+
+            @Override
+            public void onError(String error) {
+                // Maneja errores de conexión o recepción de datos
+                requireActivity().runOnUiThread(() -> {
+                    Toast.makeText(getContext(), "Error: " + error, Toast.LENGTH_SHORT).show();
+                });
+            }
         });
 
         return root;
     }
 
+
     @Override
     public void onDestroyView() {
         super.onDestroyView();
Index: app/src/main/java/com/example/appmovil/ui/wifi/WifiHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.appmovil.ui.wifi;\r\n\r\nimport android.os.AsyncTask;\r\nimport android.util.Log;\r\n\r\nimport java.io.BufferedReader;\r\nimport java.io.InputStreamReader;\r\nimport java.net.HttpURLConnection;\r\nimport java.net.URL;\r\n\r\npublic class WifiHandler {\r\n\r\n    private static String serverUrl;\r\n\r\n    public WifiHandler(String serverUrl) {\r\n        this.serverUrl = serverUrl;\r\n    }\r\n\r\n    public void fetchData(OnDataReceivedListener listener) {\r\n        //new FetchDataTask(listener).execute();\r\n\r\n        String mockData = \"10010001\";\r\n        listener.onDataReceived(mockData);\r\n    }\r\n\r\n    public interface OnDataReceivedListener {\r\n        void onDataReceived(String data);\r\n    }\r\n\r\n    private static class FetchDataTask extends AsyncTask<Void, Void, String> {\r\n        private OnDataReceivedListener listener;\r\n\r\n        FetchDataTask(OnDataReceivedListener listener) {\r\n            this.listener = listener;\r\n        }\r\n\r\n        @Override\r\n        protected String doInBackground(Void... voids) {\r\n            try {\r\n                URL url = new URL(\"http://\" + serverUrl);\r\n                HttpURLConnection connection = (HttpURLConnection) url.openConnection();\r\n                connection.setRequestMethod(\"GET\");\r\n\r\n                BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream()));\r\n                StringBuilder response = new StringBuilder();\r\n                String line;\r\n\r\n                while ((line = reader.readLine()) != null) {\r\n                    response.append(line);\r\n                }\r\n\r\n                reader.close();\r\n                return response.toString();\r\n\r\n            } catch (Exception e) {\r\n                e.printStackTrace();\r\n                return null;\r\n            }\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(String data) {\r\n            if (listener != null) {\r\n                listener.onDataReceived(data);\r\n            }\r\n        }\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/appmovil/ui/wifi/WifiHandler.java b/app/src/main/java/com/example/appmovil/ui/wifi/WifiHandler.java
--- a/app/src/main/java/com/example/appmovil/ui/wifi/WifiHandler.java	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
+++ b/app/src/main/java/com/example/appmovil/ui/wifi/WifiHandler.java	(date 1732221352126)
@@ -10,24 +10,74 @@
 
 public class WifiHandler {
 
-    private static String serverUrl;
+    private String serverUrl;
+    private OnDataReceivedListener dataReceivedListener;
+    private volatile boolean listening;
+    private Thread listeningThread;
 
     public WifiHandler(String serverUrl) {
         this.serverUrl = serverUrl;
     }
 
+    public void connect() throws Exception {
+        // Si necesitas verificar la conexión al servidor, puedes agregar lógica aquí
+    }
+
+    public void startListening() {
+        listening = true;
+        listeningThread = new Thread(() -> {
+            while (listening) {
+                try {
+                    fetchData(new OnDataReceivedListener() {
+                        @Override
+                        public void onDataReceived(String data) {
+                            if (dataReceivedListener != null) {
+                                dataReceivedListener.onDataReceived(data);
+                            }
+                        }
+
+                        @Override
+                        public void onError(String error) {
+                            if (dataReceivedListener != null) {
+                                dataReceivedListener.onError(error);
+                            }
+                        }
+                    });
+                    // Esperar un tiempo antes de la próxima solicitud (por ejemplo, 1 segundo)
+                    Thread.sleep(1000);
+                } catch (Exception e) {
+                    if (dataReceivedListener != null) {
+                        dataReceivedListener.onError(e.getMessage());
+                    }
+                }
+            }
+        });
+        listeningThread.start();
+    }
+
+
     public void fetchData(OnDataReceivedListener listener) {
-        //new FetchDataTask(listener).execute();
+        new FetchDataTask(listener).execute();
+    }
 
-        String mockData = "10010001";
-        listener.onDataReceived(mockData);
+    public void closeConnection() {
+        listening = false;
+        if (listeningThread != null) {
+            listeningThread.interrupt();
+            listeningThread = null;
+        }
+    }
+
+    public void setOnDataReceivedListener(OnDataReceivedListener listener) {
+        this.dataReceivedListener = listener;
     }
 
     public interface OnDataReceivedListener {
         void onDataReceived(String data);
+        void onError(String error);
     }
 
-    private static class FetchDataTask extends AsyncTask<Void, Void, String> {
+    private class FetchDataTask extends AsyncTask<Void, Void, String> {
         private OnDataReceivedListener listener;
 
         FetchDataTask(OnDataReceivedListener listener) {
@@ -37,7 +87,7 @@
         @Override
         protected String doInBackground(Void... voids) {
             try {
-                URL url = new URL("http://" + serverUrl);
+                URL url = new URL(serverUrl.startsWith("http") ? serverUrl : "http://" + serverUrl);
                 HttpURLConnection connection = (HttpURLConnection) url.openConnection();
                 connection.setRequestMethod("GET");
 
@@ -53,7 +103,7 @@
                 return response.toString();
 
             } catch (Exception e) {
-                e.printStackTrace();
+                Log.e("FetchDataTask", "Error fetching data", e);
                 return null;
             }
         }
@@ -61,8 +111,12 @@
         @Override
         protected void onPostExecute(String data) {
             if (listener != null) {
-                listener.onDataReceived(data);
+                if (data != null) {
+                    listener.onDataReceived(data);
+                } else {
+                    listener.onError("Failed to fetch data");
+                }
             }
         }
     }
-}
\ No newline at end of file
+}
Index: app/src/main/java/com/example/appmovil/ui/bluetooth/BluetoothFragment.java
===================================================================
diff --git a/app/src/main/java/com/example/appmovil/ui/bluetooth/BluetoothFragment.java b/app/src/main/java/com/example/appmovil/ui/bluetooth/BluetoothFragment.java
deleted file mode 100644
--- a/app/src/main/java/com/example/appmovil/ui/bluetooth/BluetoothFragment.java	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
+++ /dev/null	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
@@ -1,236 +0,0 @@
-package com.example.appmovil.ui.bluetooth;
-
-import android.Manifest;
-import android.content.pm.PackageManager;
-import android.graphics.Color;
-import android.os.Build;
-import android.os.Bundle;
-import android.view.Gravity;
-import android.view.LayoutInflater;
-import android.view.View;
-import android.view.ViewGroup;
-import android.widget.LinearLayout;
-import android.widget.TextView;
-import android.widget.Toast;
-
-import androidx.annotation.NonNull;
-import androidx.core.app.ActivityCompat;
-import androidx.fragment.app.Fragment;
-
-import com.example.appmovil.R;
-import com.example.appmovil.databinding.FragmentRfidBinding;
-import com.example.appmovil.ui.carros.Vehiculo;
-
-import java.time.Instant;
-import java.util.ArrayList;
-import java.util.Date;
-
-public class BluetoothFragment extends Fragment {
-
-    private static final int REQUEST_BLUETOOTH_PERMISSIONS = 1;
-    private FragmentRfidBinding binding;
-    private Bluetooth bluetooth; // Instancia de la clase Bluetooth
-    private TextView textView; // TextView para mostrar los datos recibidos
-
-    private ArrayList<Vehiculo> vehiculos;
-    private LinearLayout vehicleContainer;
-
-    @Override
-    public View onCreateView(@NonNull LayoutInflater inflater,
-                             ViewGroup container, Bundle savedInstanceState) {
-        binding = FragmentRfidBinding.inflate(inflater, container, false);
-        View root = binding.getRoot();
-
-        // Inicializar el TextView para mostrar los datos
-        textView = binding.textHome; // Asumiendo que tienes un TextView en tu layout con id textHome
-        this.vehiculos = new ArrayList<>();
-        // Inicialización del Bluetooth
-        bluetooth = new Bluetooth("ESP32-Parqueadero");  // Cambia el nombre del dispositivo Bluetooth si es necesario
-
-        // Verificar si Bluetooth está disponible y habilitado
-        if (!bluetooth.isBluetoothAvailable()) {
-            textView.setText("Bluetooth no está disponible en este dispositivo.");
-            textView.setVisibility(View.VISIBLE);
-        } else if (!bluetooth.isBluetoothEnabled()) {
-            textView.setText("Por favor, habilita Bluetooth.");
-            textView.setVisibility(View.VISIBLE);
-        } else {
-            // Verificar permisos y solicitar si es necesario
-            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
-                if (ActivityCompat.checkSelfPermission(requireContext(), Manifest.permission.BLUETOOTH_CONNECT) != PackageManager.PERMISSION_GRANTED) {
-                    requestPermissions(new String[]{Manifest.permission.BLUETOOTH_CONNECT}, REQUEST_BLUETOOTH_PERMISSIONS);
-                } else {
-                    // Si ya tenemos permisos, intentar la conexión
-                    connectToBluetooth();
-                }
-            } else {
-                // En versiones anteriores a Android 12, no es necesario solicitar permisos específicos de Bluetooth
-                connectToBluetooth();
-            }
-        }
-
-        vehicleContainer = root.findViewById(R.id.vehicle_container);
-        // Simulación de Bluetooth OnDataReceivedListener
-        return root;
-    }
-
-    private void connectToBluetooth() {
-        new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    bluetooth.connect(); // Intentamos conectar
-                    getActivity().runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            textView.setText("Conectado al dispositivo Bluetooth.");
-                            textView.setVisibility(View.GONE);
-                        }
-                    });
-
-                    bluetooth.startListening(); // Empezamos a escuchar los datos enviados por el ESP32
-                } catch (Exception e) {
-                    getActivity().runOnUiThread(new Runnable() {
-                        @Override
-                        public void run() {
-                            textView.setText("Error al conectar: " + e.getMessage());
-                            textView.setVisibility(View.VISIBLE);
-                        }
-                    });
-                }
-            }
-        }).start();
-
-        // Configuración para recibir datos de Bluetooth
-        bluetooth.setOnDataReceivedListener(new Bluetooth.OnDataReceivedListener() {
-            @Override
-            public void onDataReceived(String data) {
-                getActivity().runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        gestionParqueaderos(data);
-
-                    }
-                });
-            }
-
-            @Override
-            public void onError(String error) {
-                getActivity().runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        // Si ocurre un error, lo mostramos en un Toast
-                        Toast.makeText(getContext(), "Error: " + error, Toast.LENGTH_SHORT).show();
-                    }
-                });
-            }
-        });
-    }
-
-    @Override
-    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
-        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
-
-        if (requestCode == REQUEST_BLUETOOTH_PERMISSIONS) {
-            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
-                // Permiso concedido, intentamos la conexión
-                connectToBluetooth();
-            } else {
-                // Permiso denegado, muestra un mensaje de advertencia
-                Toast.makeText(getContext(), "Permiso denegado. No se puede acceder al Bluetooth.", Toast.LENGTH_SHORT).show();
-            }
-        }
-    }
-
-    @Override
-    public void onDestroyView() {
-        super.onDestroyView();
-        binding = null;
-
-        // Cerrar la conexión Bluetooth al destruir el fragmento
-        if (bluetooth != null) {
-            bluetooth.closeConnection();
-        }
-    }
-
-    private void updateVehicleDisplay() {
-        // Limpia el contenedor
-        vehicleContainer.removeAllViews();
-        if(!vehiculos.isEmpty()) {
-            for (Vehiculo vehiculo : vehiculos) {
-                // Crear cuadro para cada vehículo
-                TextView vehicleView = new TextView(getContext());
-                vehicleView.setText("ID: " + vehiculo.getUid() +"\nPlaca: " + vehiculo.getPlaca() + "\nEntrada: " + vehiculo.getHoraEntrada());
-                vehicleView.setPadding(16, 16, 16, 16);
-                vehicleView.setBackgroundColor(Color.parseColor("#DDDDDD"));
-                vehicleView.setTextColor(Color.BLACK);
-                vehicleView.setGravity(Gravity.CENTER_VERTICAL);
-                vehicleView.setTextSize(16);
-
-                // Margen
-                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
-                        LinearLayout.LayoutParams.MATCH_PARENT,
-                        LinearLayout.LayoutParams.WRAP_CONTENT
-                );
-                params.setMargins(0, 16, 0, 16);
-                vehicleView.setLayoutParams(params);
-
-                vehicleContainer.addView(vehicleView);
-            }
-        }
-    }
-
-    public void gestionParqueaderos(String data){
-        data = data.trim();
-        // Gestión de los datos recibidos
-        Vehiculo vehiculoSaliente = null;
-
-        if(!vehiculos.isEmpty()){
-            for(int i=0; i<vehiculos.size() ; i++){
-                if(vehiculos.get(i).getUid().equals(data)){
-                    vehiculos.get(i).setHoraSalida(new Date());
-                    vehiculoSaliente = vehiculos.get(i);
-                    vehiculos.remove(i);
-                    break;
-                }
-            }
-        }
-        if(vehiculoSaliente == null){
-            boolean condicion = (data == null || data.trim().isEmpty());
-
-            if(vehiculos.size()<=8 && !condicion) {
-                System.out.println(data);
-                Vehiculo v = new Vehiculo("nnn000", data);
-                vehiculos.add(v);
-            }
-        } else {
-            // Mostrar notificación de salida
-            mostrarNotificacionSalida(vehiculoSaliente);
-
-        }
-        updateVehicleDisplay();
-    }
-
-    private void mostrarNotificacionSalida(Vehiculo vehiculo) {
-        // Calcular la duración de la estadía
-        Date horaEntrada = vehiculo.getHoraEntrada();
-        Date horaSalida = vehiculo.getHoraSalida();
-        long duracion = vehiculo.calcularTiempoEnParqueadero();
-        long minutos = (duracion / (1000 * 60)) % 60;
-        long horas = (duracion / (1000 * 60 * 60));
-
-        // Formatear el mensaje
-        String mensaje = "Placa: " + vehiculo.getPlaca() + "\n" +
-                "Hora de entrada: " + horaEntrada + "\n" +
-                "Hora de salida: " + horaSalida + "\n" +
-                "Duración: " + horas + " horas y " + minutos + " minutos.";
-
-        // Crear y mostrar el cuadro de diálogo
-        new androidx.appcompat.app.AlertDialog.Builder(requireContext())
-                .setTitle("Vehículo salió del parqueadero")
-                .setMessage(mensaje)
-                .setPositiveButton("OK", null)
-                .show();
-    }
-
-}
Index: app/src/main/java/com/example/appmovil/ui/bluetooth/Bluetooth.java
===================================================================
diff --git a/app/src/main/java/com/example/appmovil/ui/bluetooth/Bluetooth.java b/app/src/main/java/com/example/appmovil/ui/bluetooth/Bluetooth.java
deleted file mode 100644
--- a/app/src/main/java/com/example/appmovil/ui/bluetooth/Bluetooth.java	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
+++ /dev/null	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
@@ -1,106 +0,0 @@
-package com.example.appmovil.ui.bluetooth;
-
-
-import android.annotation.SuppressLint;
-import android.bluetooth.BluetoothAdapter;
-import android.bluetooth.BluetoothDevice;
-import android.bluetooth.BluetoothSocket;
-
-import java.io.InputStream;
-import java.io.OutputStream;
-import java.util.UUID;
-
-public class Bluetooth{
-
-    private BluetoothAdapter bluetoothAdapter;
-    private BluetoothSocket bluetoothSocket;
-    private InputStream inputStream;
-    private OutputStream outputStream;
-    private String deviceName;
-    private UUID uuid;
-
-    private OnDataReceivedListener dataReceivedListener;
-
-    // device name es como se llama en el bluetooth
-    public Bluetooth(String deviceName) {
-        this.deviceName = deviceName;
-        this.bluetoothAdapter = BluetoothAdapter.getDefaultAdapter();
-        this.uuid = UUID.fromString("00001101-0000-1000-8000-00805F9B34FB");
-    }
-
-    public boolean isBluetoothAvailable() {
-        return bluetoothAdapter != null;
-    }
-
-    public boolean isBluetoothEnabled() {
-        return bluetoothAdapter.isEnabled();
-    }
-
-    @SuppressLint("MissingPermission")
-    public void connect() throws Exception {
-        BluetoothDevice device = findDeviceByName(deviceName);
-        if (device == null) {
-            throw new Exception("Dispositivo Bluetooth no encontrado: " + deviceName);
-        }
-        bluetoothSocket = device.createRfcommSocketToServiceRecord(uuid);
-        bluetoothSocket.connect();
-        inputStream = bluetoothSocket.getInputStream();
-        outputStream = bluetoothSocket.getOutputStream();
-    }
-
-    @SuppressLint("MissingPermission")
-    private BluetoothDevice findDeviceByName(String name) {
-        for (BluetoothDevice device : bluetoothAdapter.getBondedDevices()) {
-            if (name.equals(device.getName())) {
-                return device;
-            }
-        }
-        return null;
-    }
-
-    public void startListening() {
-        new Thread(() -> {
-            byte[] buffer = new byte[1024];
-            int bytes;
-            try {
-                while ((bytes = inputStream.read(buffer)) != -1) {
-                    String receivedData = new String(buffer, 0, bytes);
-                    if (dataReceivedListener != null) {
-                        dataReceivedListener.onDataReceived(receivedData);
-                    }
-                }
-            } catch (Exception e) {
-                if (dataReceivedListener != null) {
-                    dataReceivedListener.onError(e.getMessage());
-                }
-            }
-        }).start();
-    }
-
-    public void sendData(String data) throws Exception {
-        if (outputStream != null) {
-            outputStream.write(data.getBytes());
-        } else {
-            throw new Exception("No hay conexión Bluetooth activa.");
-        }
-    }
-
-    public void closeConnection() {
-        try {
-            if (inputStream != null) inputStream.close();
-            if (outputStream != null) outputStream.close();
-            if (bluetoothSocket != null) bluetoothSocket.close();
-        } catch (Exception ignored) {
-        }
-    }
-
-    public void setOnDataReceivedListener(OnDataReceivedListener listener) {
-        this.dataReceivedListener = listener;
-    }
-
-    public interface OnDataReceivedListener {
-        void onDataReceived(String data);
-
-        void onError(String error);
-    }
-}
\ No newline at end of file
Index: .idea/deploymentTargetSelector.xml
===================================================================
diff --git a/.idea/deploymentTargetSelector.xml b/.idea/deploymentTargetSelector.xml
deleted file mode 100644
--- a/.idea/deploymentTargetSelector.xml	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
+++ /dev/null	(revision 2695885404c2c24ccf33bfaf5381c3c20b7cdb05)
@@ -1,10 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetSelector">
-    <selectionStates>
-      <SelectionState runConfigName="AppMovil.app">
-        <option name="selectionMode" value="DROPDOWN" />
-      </SelectionState>
-    </selectionStates>
-  </component>
-</project>
\ No newline at end of file
Index: app/src/main/java/com/example/appmovil/ui/wifi/WifiFragment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/appmovil/ui/wifi/WifiFragment.java b/app/src/main/java/com/example/appmovil/ui/wifi/WifiFragment.java
new file mode 100644
--- /dev/null	(date 1732221232200)
+++ b/app/src/main/java/com/example/appmovil/ui/wifi/WifiFragment.java	(date 1732221232200)
@@ -0,0 +1,168 @@
+package com.example.appmovil.ui.wifi;
+
+import android.graphics.Color;
+import android.os.Bundle;
+import android.view.Gravity;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.LinearLayout;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import androidx.annotation.NonNull;
+import androidx.fragment.app.Fragment;
+
+import com.example.appmovil.R;
+import com.example.appmovil.databinding.FragmentRfidBinding;
+import com.example.appmovil.ui.carros.Vehiculo;
+
+import java.util.ArrayList;
+import java.util.Date;
+
+public class WifiFragment extends Fragment {
+
+    private FragmentRfidBinding binding;
+    private WifiHandler wifiHandler; // Instancia de la clase WifiHandler
+    private ArrayList<Vehiculo> vehiculos;
+    private LinearLayout vehicleContainer;
+
+    @Override
+    public View onCreateView(@NonNull LayoutInflater inflater,
+                             ViewGroup container, Bundle savedInstanceState) {
+        binding = FragmentRfidBinding.inflate(inflater, container, false);
+        View root = binding.getRoot();
+
+        this.vehiculos = new ArrayList<>();
+
+        // Inicialización del WifiHandler con la URL del servidor
+        wifiHandler = new WifiHandler("http://tu_servidor.com/endpoint");  // Reemplaza con la URL de tu servidor
+
+        // Intentar conectar y empezar a escuchar
+        new Thread(() -> {
+            try {
+                wifiHandler.connect();
+                getActivity().runOnUiThread(() -> {
+                    // Conectado exitosamente
+                    Toast.makeText(getContext(), "Conectado al servidor.", Toast.LENGTH_SHORT).show();
+                });
+                wifiHandler.setOnDataReceivedListener(new WifiHandler.OnDataReceivedListener() {
+                    @Override
+                    public void onDataReceived(String data) {
+                        getActivity().runOnUiThread(() -> {
+                            gestionParqueaderos(data);
+                        });
+                    }
+
+                    @Override
+                    public void onError(String error) {
+                        getActivity().runOnUiThread(() -> {
+                            // Mostrar error en un Toast
+                            Toast.makeText(getContext(), "Error: " + error, Toast.LENGTH_SHORT).show();
+                        });
+                    }
+                });
+                wifiHandler.startListening();
+            } catch (Exception e) {
+                getActivity().runOnUiThread(() -> {
+                    // Error al conectar
+                    Toast.makeText(getContext(), "Error al conectar: " + e.getMessage(), Toast.LENGTH_SHORT).show();
+                });
+            }
+        }).start();
+
+        vehicleContainer = root.findViewById(R.id.vehicle_container);
+
+        return root;
+    }
+
+    @Override
+    public void onDestroyView() {
+        super.onDestroyView();
+        binding = null;
+
+        // Cerrar la conexión Wi-Fi al destruir el fragmento
+        if (wifiHandler != null) {
+            wifiHandler.closeConnection();
+        }
+    }
+
+    private void updateVehicleDisplay() {
+        // Limpia el contenedor
+        vehicleContainer.removeAllViews();
+        if (!vehiculos.isEmpty()) {
+            for (Vehiculo vehiculo : vehiculos) {
+                // Crear cuadro para cada vehículo
+                TextView vehicleView = new TextView(getContext());
+                vehicleView.setText("ID: " + vehiculo.getUid() + "\nPlaca: " + vehiculo.getPlaca() + "\nEntrada: " + vehiculo.getHoraEntrada());
+                vehicleView.setPadding(16, 16, 16, 16);
+                vehicleView.setBackgroundColor(Color.parseColor("#DDDDDD"));
+                vehicleView.setTextColor(Color.BLACK);
+                vehicleView.setGravity(Gravity.CENTER_VERTICAL);
+                vehicleView.setTextSize(16);
+
+                // Margen
+                LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(
+                        LinearLayout.LayoutParams.MATCH_PARENT,
+                        LinearLayout.LayoutParams.WRAP_CONTENT
+                );
+                params.setMargins(0, 16, 0, 16);
+                vehicleView.setLayoutParams(params);
+
+                vehicleContainer.addView(vehicleView);
+            }
+        }
+    }
+
+    public void gestionParqueaderos(String data) {
+        data = data.trim();
+        // Gestión de los datos recibidos
+        Vehiculo vehiculoSaliente = null;
+
+        if (!vehiculos.isEmpty()) {
+            for (int i = 0; i < vehiculos.size(); i++) {
+                if (vehiculos.get(i).getUid().equals(data)) {
+                    vehiculos.get(i).setHoraSalida(new Date());
+                    vehiculoSaliente = vehiculos.get(i);
+                    vehiculos.remove(i);
+                    break;
+                }
+            }
+        }
+        if (vehiculoSaliente == null) {
+            boolean condicion = (data == null || data.trim().isEmpty());
+
+            if (vehiculos.size() <= 8 && !condicion) {
+                System.out.println(data);
+                Vehiculo v = new Vehiculo("nnn000", data);
+                vehiculos.add(v);
+            }
+        } else {
+            // Mostrar notificación de salida
+            mostrarNotificacionSalida(vehiculoSaliente);
+        }
+        updateVehicleDisplay();
+    }
+
+    private void mostrarNotificacionSalida(Vehiculo vehiculo) {
+        // Calcular la duración de la estadía
+        Date horaEntrada = vehiculo.getHoraEntrada();
+        Date horaSalida = vehiculo.getHoraSalida();
+        long duracion = vehiculo.calcularTiempoEnParqueadero();
+        long minutos = (duracion / (1000 * 60)) % 60;
+        long horas = (duracion / (1000 * 60 * 60));
+
+        // Formatear el mensaje
+        String mensaje = "Placa: " + vehiculo.getPlaca() + "\n" +
+                "Hora de entrada: " + horaEntrada + "\n" +
+                "Hora de salida: " + horaSalida + "\n" +
+                "Duración: " + horas + " horas y " + minutos + " minutos.";
+
+        // Crear y mostrar el cuadro de diálogo
+        new androidx.appcompat.app.AlertDialog.Builder(requireContext())
+                .setTitle("Vehículo salió del parqueadero")
+                .setMessage(mensaje)
+                .setPositiveButton("OK", null)
+                .show();
+    }
+}
